digraph G {
    splines="FALSE";
    rankdir=BT;
    overlap=scalexy;
    node [shape="record" fontname = "Consolas" fontsize = 8];
    /* Entities */
    edge[style="dashed", arrowhead="none"];
    // {rank=same;AST_Node,AST_Node_Doc};
    AST_Token           [label="{AST_Token | type\lvalue\lline\lcol\lpos\lendline\lendcol\lendpos\lnlb\lcomments_before\lfile\lraw\l}"];
    AST_Node            [label="{AST_Node | start: AST_Token\lend: AST_Token\l | _clone(deep)\lclone(deep)\ldocumentation\lpropdoc\l_walk(visitor)\lwalk(visitor)\lwarn(txt, props)\l}"];
    // AST_Node_Doc        [label="Base class of all AST nodes\l\{\lstart: [AST_Token] The first token of this node,\lend: [AST_Token] The last token of this node\l\}\l}"
    // style="filled"];
    // AST_Node -> AST_Node_Doc;
    AST_Statement       [label="{AST_Statement\l | \l}"];

    AST_Debugger        [label="{AST_Debugger\l | \l}"];
    // AST_Debugger_Doc    [label="{Represents a debugger statement}",style="filled"];
    // AST_Debugger -> AST_Debugger_Doc;

    AST_Directive       [label="{AST_Directive\l | value: string\lscope: AST_Scope/S\lquote: string\l}"];
    // AST_Directive_Doc   [label="{Represents a directive, like \"use strict\";}"];
    // AST_Directive -> AST_Directive_Doc;

    AST_SimpleStatement [label="{AST_SimpleStatement\l | body: AST_Node\l | _walk(visitor)\l}"];
    AST_Block           [label="{AST_Block\l | body: AST_Statement*\l | _walk(visitor)}"];
    AST_BlockStatement  [label="{AST_BlockStatement\l |\l}"];
    AST_EmptyStatement  [label="{AST_EmptyStatement\l |\l}"];
    AST_StatementWithBody   [label="{AST_StatementWithBody\l | body: AST_Statement\l}"];
    AST_LabeledStatement    [label="{AST_LabeledStatement\l | label: AST_Label\l | _walk(visitor)\lclone(deep)\l}"];
    AST_IterationStatement  [label="{AST_IterationStatement\l | \l}"];
    AST_DWLoop              [label="{AST_DWLoop\l | condition:AST_Node\l}"];
    AST_Do                  [label="{AST_Do\l | _walk(visitor)\l}"];
    AST_While               [label="{AST_While\l | _walk(visitor)\l}"];
    AST_For                 [label="{AST_For\l | init:AST_Node?\lcondition:AST_Node?\lstep:AST_Node?\l | _walk(visitor)\l}"];
    AST_ForIn               [label="{AST_ForIn\l | init:AST_Node\lname:AST_SymbolRef?\lobject:AST_Node\l | _walk(visitor)\l}"];
    AST_With                [label="{AST_With\l | expression:AST_Node\l | _walk(visitor)}"];

    /*----[scope]----*/
    AST_Scope               [label="{AST_Scope\l | directives:string*/S\lvariables:Object/S\lfunctions:Object/S\luses_with:boolean/S\luses_eval:boolean/S\lparent_scope:AST_Scope?/S\lenclosed:SymbolDef*/S\lcname:integer/S\l}"];
    AST_Toplevel            [label="{AST_Toplevel\l | globals:Object/S\l | wrap_commonjs(name)\l}"];
    AST_Lambda              [label="{AST_Lambda\l | name:AST_SymbolDeclaration?\largnames:AST_SymbolFunarg*\luses_arguments:boolean/S\l | _walk(visitor)\l}"];
    AST_Accessor            [label="{AST_Accessor\l | \l}"];
    AST_Function            [label="{AST_Function\l | \l}"];
    AST_Defun               [label="{AST_Defun\l | \l}"];

    /* -----[ JUMPS ]----- */
    AST_Jump                [label="{AST_Jump\l | \l}"];
    AST_Exit                [label="{AST_Exit\l | value:AST_Node?\l | _walk(visitor)\l}"];
    AST_Return              [label="{AST_Return\l | \l}"];
    AST_Throw               [label="{AST_Throw\l | \l}"];
    AST_LoopControl         [label="{AST_LoopControl\l | label:AST_LabelRef?\l | _walk(visitor)\l}"];
    AST_Break               [label="{AST_Break\l | \l}"];
    AST_Continue            [label="{AST_Continue\l | \l}"];

    /* -----[ IF ]----- */
    AST_If                  [label="{AST_If\l | condition:AST_Node\lalternative:AST_Statement?\l | _walk(visitor)\l}"];

    /* -----[ SWITCH ]----- */
    AST_Switch              [label="{AST_Switch\l | expression:AST_Node\l | _walk(visitor)\l}"];
    AST_SwitchBranch        [label="{AST_SwitchBranch\l | \l}"];
    AST_Default             [label="{AST_Default\l | \l}"];
    AST_Case                [label="{AST_Case\l | expression:AST_Node\l | _walk(wisitor)\l}"];

    /* -----[ EXCEPTIONS ]----- */
    AST_Try                 [label="{AST_Try\l | bcatch:AST_Catch?\lbfinally:AST_Finally?\l | _walk(visitor)\l}"];
    AST_Catch               [label="{AST_Catch\l | argname:AST_SymbolCatch\l | _walk(visitor)\l}"];
    AST_Finally             [label="{AST_Finally\l | \l}"];

    /* -----[ VAR ]----- */
    AST_Definitions         [label="{AST_Definitions\l | definitions:AST_VarDef*\l | _walk(visitor)\l}"];
    AST_Var                 [label="{AST_Var\l | \l}"];
    AST_VarDef              [label="{AST_VarDef\l | name:AST_SymbolVar\lvalue:AST_Node?\l | _walk(visitor)\l}"];

    /* -----[ OTHER ]----- */
    AST_Call                [label="{AST_Call\l | expression:AST_Node\largs:AST_Node*\l | _walk(visitor)\l}"];
    AST_New                 [label="{AST_New\l | \l}"];
    AST_Sequence            [label="{AST_Sequence\l | expressions:AST_Node*\l | _walk(visitor)\l}"];
    AST_PropAccess          [label="{AST_PropAccess\l | expression:AST_Node\lproperty:AST_Node|string\l}"];
    AST_Dot                 [label="{AST_Dot\l | _walk(visitor)\l}"];
    AST_Sub                 [label="{AST_Sub\l | _walk(visitor)\l}"];
    AST_Unary               [label="{AST_Unary\l | operator:string\lexpression:AST_Node\l | _walk(visitor)\l}"];
    AST_UnaryPrefix         [label="{AST_UnaryPrefix\l | \l}"];
    AST_UnaryPostfix        [label="{AST_UnaryPostfix\l | \l}"];
    AST_Binary              [label="{AST_Binary\l | operator:AST_Node\lleft:string\lright:AST_Node\l | _walk(visitor)\l}"];
    AST_Conditional         [label="{AST_Conditional\l | condition:AST_Node\lconsequent:AST_Node\lalternative:AST_Node\l | _walk(visitor)\l}"];
    AST_Assign              [label="{AST_Assign\l | \l}"];

    /* -----[ LITERALS ]----- */
    AST_Array               [label="{AST_Array\l | elements:AST_Node*\l | _walk(visitor)\l}"];
    AST_Object              [label="{AST_Object\l | properties:AST_ObjectProperty*\l | _walk(visitor)\l}"];
    AST_ObjectProperty      [label="{AST_ObjectProperty\l | key:string\lvalue:AST_Node\l | _walk(visitor)\l}"];
    AST_ObjectKeyVal        [label="{AST_ObjectKeyVal\l | quote:string\l }"];
    AST_ObjectSetter        [label="{AST_ObjectSetter\l | \l}"];
    AST_ObjectGetter        [label="{AST_ObjectGetter\l | \l}"];
    AST_Symbol              [label="{AST_Symbol\l | scope:string\lname:AST_Scope/S\lthedef:SymbolDef/S\l}"];
    AST_SymbolAccessor      [label="{AST_SymbolAccessor\l | \l}"];
    AST_SymbolDeclaration   [label="{AST_SymbolDeclaration\l | \l}"];
    AST_SymbolVar           [label="{AST_SymbolVar\l | \l}"];
    AST_SymbolFunarg        [label="{AST_SymbolFunarg\l | \l}"];
    AST_SymbolDefun         [label="{AST_SymbolDefun\l | \l}"];
    AST_SymbolLambda        [label="{AST_SymbolLambda\l | \l}"];
    AST_SymbolCatch         [label="{AST_SymbolCatch\l | \l}"];
    AST_Label               [label="{AST_Label\l | references:AST_LoopControl*\l | initialize()\l}"];
    AST_SymbolRef           [label="{AST_SymbolRef\l | \l}"];
    AST_LabelRef            [label="{AST_LabelRef\l | \l}"];
    AST_This                [label="{AST_This\l | \l}"];
    AST_Constant            [label="{AST_Constant\l | getValue()\l}"];
    AST_String              [label="{AST_String\l | value:string\lquote:string\l}"];
    AST_Number              [label="{AST_Number\l | value:number\lliteral:string\l}"];
    AST_RegExp              [label="{AST_RegExp\l | value:RegExp\l}"];
    AST_Atom                [label="{AST_Atom\l | \l}"];
    AST_Null                [label="{AST_Null\l | value:null\l}"];
    AST_NaN                 [label="{AST_NaN\l | value:0/0\l}"];
    AST_Undefined           [label="{AST_Undefined\l | value: (function()\{\}())\l}"];
    AST_Hole                [label="{AST_Hole\l | value: (function()\{\}())\l}"];
    AST_Infinity            [label="{AST_Infinity\l | value: 1/0\l}"];
    AST_Boolean             [label="{AST_Boolean\l | \l}"];
    AST_False               [label="{AST_False\l | value: false\l}"];
    AST_True                [label="{AST_True\l | value: true\l}"];
    /* Relationships */
    edge[ arrowhead="onormal", style="filled"];
    AST_Statement -> AST_Node;
    AST_Debugger -> AST_Statement;
    AST_Directive -> AST_Statement;
    AST_SimpleStatement -> AST_Statement;
    AST_Block -> AST_Statement;
    AST_BlockStatement -> AST_Block;
    AST_EmptyStatement -> AST_Statement;
    AST_StatementWithBody -> AST_Statement;
    AST_LabeledStatement -> AST_StatementWithBody;
    AST_IterationStatement -> AST_StatementWithBody;
    AST_DWLoop -> AST_IterationStatement;
    AST_Do -> AST_DWLoop;
    AST_While -> AST_DWLoop;
    AST_For -> AST_IterationStatement;
    AST_ForIn -> AST_IterationStatement;
    AST_With -> AST_StatementWithBody;

    AST_Scope -> AST_Block;
    AST_Toplevel -> AST_Scope;
    AST_Lambda -> AST_Scope;
    AST_Accessor -> AST_Lambda;
    AST_Function -> AST_Lambda;
    AST_Defun -> AST_Lambda;

    AST_Jump-> AST_Statement;
    AST_Exit -> AST_Jump;
    AST_Return -> AST_Exit;
    AST_Throw -> AST_Exit;
    AST_LoopControl -> AST_Jump;
    AST_Break -> AST_LoopControl;
    AST_Continue -> AST_LoopControl;

    /* -----[ IF ]----- */
    AST_If -> AST_StatementWithBody;

    AST_Switch -> AST_Block;
    AST_SwitchBranch -> AST_Block;
    AST_Default -> AST_Block;
    AST_Case -> AST_SwitchBranch;

    AST_Try -> AST_Block;
    AST_Catch -> AST_Block;
    AST_Finally -> AST_Block;

    AST_Definitions -> AST_Statement;
    AST_Var -> AST_Definitions;
    AST_VarDef -> AST_Node;

    AST_Call -> AST_Node;
    AST_New -> AST_Call;
    AST_Sequence -> AST_Node;
    AST_PropAccess -> AST_Node;
    AST_Dot -> AST_PropAccess;
    AST_Sub -> AST_PropAccess;
    AST_Unary -> AST_Node;
    AST_UnaryPrefix -> AST_Unary;
    AST_UnaryPostfix -> AST_Unary;
    AST_Binary -> AST_Node;
    AST_Conditional -> AST_Node;
    AST_Assign -> AST_Binary;

    AST_Array -> AST_Node;
    AST_Object -> AST_Node;
    AST_ObjectProperty -> AST_Node;
    AST_ObjectKeyVal -> AST_ObjectProperty;
    AST_ObjectSetter -> AST_ObjectProperty;
    AST_ObjectGetter -> AST_ObjectProperty;
    AST_Symbol -> AST_Node;
    AST_SymbolAccessor -> AST_Symbol;
    AST_SymbolDeclaration -> AST_Symbol;
    AST_SymbolVar -> AST_SymbolDeclaration;
    AST_SymbolFunarg -> AST_SymbolVar;
    AST_SymbolDefun -> AST_SymbolDeclaration;
    AST_SymbolLambda -> AST_SymbolDeclaration;
    AST_SymbolCatch -> AST_SymbolDeclaration;
    AST_Label -> AST_Symbol;
    AST_SymbolRef -> AST_Symbol;
    AST_LabelRef -> AST_Symbol;
    AST_This -> AST_Symbol;
    AST_Constant -> AST_Node;
    AST_String -> AST_Constant;
    AST_Number -> AST_Constant;
    AST_RegExp -> AST_Constant;
    AST_Atom -> AST_Constant;
    AST_Null -> AST_Atom;
    AST_NaN -> AST_Atom;
    AST_Undefined -> AST_Atom;
    AST_Hole -> AST_Atom;
    AST_Infinity -> AST_Atom;
    AST_Boolean -> AST_Atom;
    AST_True -> AST_Boolean;
    AST_False -> AST_Boolean;
    /* Ranks */
    // { rank=|same,min,max,# max is bottom|; AST_Token; };
    {rank = same; AST_Token; AST_Node};
}